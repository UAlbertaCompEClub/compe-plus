/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v4.0.1), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 102 }

  /* === schema: public === */

  /* --- enums --- */

  export type resume_review_state = 'canceled' | 'finished' | 'reviewing' | 'seeking_reviewer';
  export namespace every {
    export type resume_review_state = ['canceled', 'finished', 'reviewing', 'seeking_reviewer'];
  }
  export type role_type = 'admin' | 'interviewer' | 'reviewer' | 'student';
  export namespace every {
    export type role_type = ['admin', 'interviewer', 'reviewer', 'student'];
  }

  /* --- tables --- */

  export namespace documents {
    export type Table = 'documents';
    export interface Selectable {
      /**
      * **documents.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **documents.note**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      note: string;
      /**
      * **documents.is_review**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_review: boolean;
      /**
      * **documents.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **documents.resume_review_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      resume_review_id: string;
      /**
      * **documents.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **documents.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **documents.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **documents.note**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      note: string;
      /**
      * **documents.is_review**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_review: boolean;
      /**
      * **documents.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **documents.resume_review_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      resume_review_id: string;
      /**
      * **documents.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **documents.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **documents.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **documents.note**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      note?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **documents.is_review**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_review?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **documents.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **documents.resume_review_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      resume_review_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **documents.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **documents.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **documents.note**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      note: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **documents.is_review**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_review: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **documents.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **documents.resume_review_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      resume_review_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **documents.note**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      note?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **documents.is_review**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_review?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **documents.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **documents.resume_review_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      resume_review_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'documents_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace interviews {
    export type Table = 'interviews';
    export interface Selectable {
      /**
      * **interviews.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **interviews.time_slot**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      time_slot: string;
      /**
      * **interviews.interviewee**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewee: string;
      /**
      * **interviews.interviewer**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewer: string;
    }
    export interface JSONSelectable {
      /**
      * **interviews.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **interviews.time_slot**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      time_slot: string;
      /**
      * **interviews.interviewee**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewee: string;
      /**
      * **interviews.interviewer**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewer: string;
    }
    export interface Whereable {
      /**
      * **interviews.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **interviews.time_slot**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      time_slot?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **interviews.interviewee**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewee?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **interviews.interviewer**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewer?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **interviews.time_slot**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      time_slot: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **interviews.interviewee**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewee: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **interviews.interviewer**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewer: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **interviews.time_slot**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      time_slot?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **interviews.interviewee**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewee?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **interviews.interviewer**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      interviewer?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'interviews_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace resume_reviews {
    export type Table = 'resume_reviews';
    export interface Selectable {
      /**
      * **resume_reviews.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **resume_reviews.reviewee_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reviewee_id: string;
      /**
      * **resume_reviews.reviewer_id**
      * - `text` in database
      * - Nullable, no default
      */
      reviewer_id: string | null;
      /**
      * **resume_reviews.state**
      * - `resume_review_state` in database
      * - `NOT NULL`, no default
      */
      state: resume_review_state;
      /**
      * **resume_reviews.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **resume_reviews.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **resume_reviews.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **resume_reviews.reviewee_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reviewee_id: string;
      /**
      * **resume_reviews.reviewer_id**
      * - `text` in database
      * - Nullable, no default
      */
      reviewer_id: string | null;
      /**
      * **resume_reviews.state**
      * - `resume_review_state` in database
      * - `NOT NULL`, no default
      */
      state: resume_review_state;
      /**
      * **resume_reviews.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **resume_reviews.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **resume_reviews.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resume_reviews.reviewee_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reviewee_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resume_reviews.reviewer_id**
      * - `text` in database
      * - Nullable, no default
      */
      reviewer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resume_reviews.state**
      * - `resume_review_state` in database
      * - `NOT NULL`, no default
      */
      state?: resume_review_state | db.Parameter<resume_review_state> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, resume_review_state | db.Parameter<resume_review_state> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resume_reviews.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resume_reviews.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **resume_reviews.reviewee_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reviewee_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **resume_reviews.reviewer_id**
      * - `text` in database
      * - Nullable, no default
      */
      reviewer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **resume_reviews.state**
      * - `resume_review_state` in database
      * - `NOT NULL`, no default
      */
      state: resume_review_state | db.Parameter<resume_review_state> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **resume_reviews.reviewee_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reviewee_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **resume_reviews.reviewer_id**
      * - `text` in database
      * - Nullable, no default
      */
      reviewer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **resume_reviews.state**
      * - `resume_review_state` in database
      * - `NOT NULL`, no default
      */
      state?: resume_review_state | db.Parameter<resume_review_state> | db.SQLFragment | db.SQLFragment<any, resume_review_state | db.Parameter<resume_review_state> | db.SQLFragment>;
    }
    export type UniqueIndex = 'resume_reviews_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace time_slots {
    export type Table = 'time_slots';
    export interface Selectable {
      /**
      * **time_slots.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **time_slots.at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      at: Date;
      /**
      * **time_slots.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **time_slots.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **time_slots.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **time_slots.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **time_slots.at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      at: db.TimestampTzString;
      /**
      * **time_slots.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **time_slots.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **time_slots.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **time_slots.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **time_slots.at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **time_slots.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **time_slots.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **time_slots.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **time_slots.at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **time_slots.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **time_slots.at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **time_slots.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'time_slots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace user_roles {
    export type Table = 'user_roles';
    export interface Selectable {
      /**
      * **user_roles.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **user_roles.role**
      * - `role_type` in database
      * - `NOT NULL`, no default
      */
      role: role_type;
      /**
      * **user_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **user_roles.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **user_roles.role**
      * - `role_type` in database
      * - `NOT NULL`, no default
      */
      role: role_type;
      /**
      * **user_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **user_roles.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_roles.role**
      * - `role_type` in database
      * - `NOT NULL`, no default
      */
      role?: role_type | db.Parameter<role_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, role_type | db.Parameter<role_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_roles.user_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_roles.role**
      * - `role_type` in database
      * - `NOT NULL`, no default
      */
      role: role_type | db.Parameter<role_type> | db.SQLFragment;
    }
    export interface Updatable {
    
    }
    export type UniqueIndex = 'user_roles_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string;
      /**
      * **users.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program: string;
      /**
      * **users.year**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **users.given_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      given_name: string;
      /**
      * **users.family_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      family_name: string;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string;
      /**
      * **users.photo_url**
      * - `text` in database
      * - Nullable, no default
      */
      photo_url: string | null;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string;
      /**
      * **users.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program: string;
      /**
      * **users.year**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **users.given_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      given_name: string;
      /**
      * **users.family_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      family_name: string;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string;
      /**
      * **users.photo_url**
      * - `text` in database
      * - Nullable, no default
      */
      photo_url: string | null;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **users.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.year**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.given_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      given_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.family_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      family_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.photo_url**
      * - `text` in database
      * - Nullable, no default
      */
      photo_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.year**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      year: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **users.given_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      given_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.family_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      family_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.photo_url**
      * - `text` in database
      * - Nullable, no default
      */
      photo_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.ccid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ccid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.program**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      program?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.year**
      * - `int2` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **users.given_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      given_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.family_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      family_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.photo_url**
      * - `text` in database
      * - Nullable, no default
      */
      photo_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = documents.Table | interviews.Table | resume_reviews.Table | time_slots.Table | user_roles.Table | users.Table;
  export type Selectable = documents.Selectable | interviews.Selectable | resume_reviews.Selectable | time_slots.Selectable | user_roles.Selectable | users.Selectable;
  export type JSONSelectable = documents.JSONSelectable | interviews.JSONSelectable | resume_reviews.JSONSelectable | time_slots.JSONSelectable | user_roles.JSONSelectable | users.JSONSelectable;
  export type Whereable = documents.Whereable | interviews.Whereable | resume_reviews.Whereable | time_slots.Whereable | user_roles.Whereable | users.Whereable;
  export type Insertable = documents.Insertable | interviews.Insertable | resume_reviews.Insertable | time_slots.Insertable | user_roles.Insertable | users.Insertable;
  export type Updatable = documents.Updatable | interviews.Updatable | resume_reviews.Updatable | time_slots.Updatable | user_roles.Updatable | users.Updatable;
  export type UniqueIndex = documents.UniqueIndex | interviews.UniqueIndex | resume_reviews.UniqueIndex | time_slots.UniqueIndex | user_roles.UniqueIndex | users.UniqueIndex;
  export type Column = documents.Column | interviews.Column | resume_reviews.Column | time_slots.Column | user_roles.Column | users.Column;
  export type AllTables = [documents.Table, interviews.Table, resume_reviews.Table, time_slots.Table, user_roles.Table, users.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    documents: documents.Selectable;
    interviews: interviews.Selectable;
    resume_reviews: resume_reviews.Selectable;
    time_slots: time_slots.Selectable;
    user_roles: user_roles.Selectable;
    users: users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    documents: documents.JSONSelectable;
    interviews: interviews.JSONSelectable;
    resume_reviews: resume_reviews.JSONSelectable;
    time_slots: time_slots.JSONSelectable;
    user_roles: user_roles.JSONSelectable;
    users: users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    documents: documents.Whereable;
    interviews: interviews.Whereable;
    resume_reviews: resume_reviews.Whereable;
    time_slots: time_slots.Whereable;
    user_roles: user_roles.Whereable;
    users: users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    documents: documents.Insertable;
    interviews: interviews.Insertable;
    resume_reviews: resume_reviews.Insertable;
    time_slots: time_slots.Insertable;
    user_roles: user_roles.Insertable;
    users: users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    documents: documents.Updatable;
    interviews: interviews.Updatable;
    resume_reviews: resume_reviews.Updatable;
    time_slots: time_slots.Updatable;
    user_roles: user_roles.Updatable;
    users: users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    documents: documents.UniqueIndex;
    interviews: interviews.UniqueIndex;
    resume_reviews: resume_reviews.UniqueIndex;
    time_slots: time_slots.UniqueIndex;
    user_roles: user_roles.UniqueIndex;
    users: users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    documents: documents.Column;
    interviews: interviews.Column;
    resume_reviews: resume_reviews.Column;
    time_slots: time_slots.Column;
    user_roles: user_roles.Column;
    users: users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    documents: documents.SQL;
    interviews: interviews.SQL;
    resume_reviews: resume_reviews.SQL;
    time_slots: time_slots.SQL;
    user_roles: user_roles.SQL;
    users: users.SQL;
  }[T];

}
